# -*- coding: utf-8 -*-
"""api.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/158jcJPzbkEwKHKraWfMqFN0_sLmNbmMC
"""

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import numpy as np
import pickle
import faiss
from sentence_transformers import SentenceTransformer
import logging

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Initialize FastAPI app
app = FastAPI(title="SHL Assessment Recommender API")

# Load model, embeddings, and metadata
model = SentenceTransformer('multi-qa-MiniLM-L6-cos-v1')
with open('assessment_embeddings.pkl', 'rb') as f:
    data = pickle.load(f)
embeddings = data['embeddings']
metadata = data['metadata']

# Normalize embeddings and build FAISS index
embeddings = embeddings / np.linalg.norm(embeddings, axis=1, keepdims=True)
d = embeddings.shape[1]
index = faiss.IndexFlatIP(d)
index.add(embeddings)

# Request model for /recommend endpoint
class QueryRequest(BaseModel):
    query: str

# Health check endpoint
@app.get("/health", response_model=dict)
async def health_check():
    return {"status": "OK"}

# Recommendation endpoint
@app.post("/recommend", response_model=dict)
async def recommend_assessments_endpoint(request: QueryRequest):
    try:
        query = request.query
        if not query.strip():
            raise HTTPException(status_code=400, detail="Query cannot be empty")

        # Generate query embedding
        query_variations = [
            query,
            f"SHL assessment psychometric testing {query}",
            f"job assessment {query}"
        ]
        query_embeddings = model.encode(query_variations, show_progress_bar=False)
        query_embedding = np.mean(query_embeddings, axis=0)
        query_embedding = query_embedding / np.linalg.norm(query_embedding)

        # Search FAISS index
        top_k = 10
        distances, indices = index.search(np.array([query_embedding], dtype=np.float32), top_k)

        # Prepare recommendations
        recommendations = []
        for idx, score in zip(indices[0], distances[0]):
            meta = metadata[idx]
            duration = f"{meta['duration_minutes']} minutes" if isinstance(meta['duration_minutes'], int) else meta['duration_minutes']
            recommendations.append({
                "name": meta['name'],
                "url": meta['url'],
                "test_type": meta['test_type'].split() if meta['test_type'] else [],
                "duration": duration,
                "remote_testing": meta['remote_testing'],
                "adaptive_irt": meta['adaptive_irt'],
                "score": float(score)
            })

        return {
            "query": query,
            "recommendations": recommendations
        }
    except Exception as e:
        logging.error(f"Error processing query: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")